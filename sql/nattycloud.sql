
#############  数据库修改到NATTYDB中，避免影响以前的功能使用 #############
#############                 Natty协议文档 v3.2             #############
USE NATTYDB;

SHOW TABLES;

DROP DATABASE NATTYDB;

# 创建NATTYDB数据库
CREATE DATABASE NATTYDB;

# TB_EFENCE 电子围栏存储格式表格
# E_ID 自增主键
# E_IMEI IMEI号，BIGINT
# E_PNUM 电子围栏点数最大6个点
# E_POINTS 经纬度点lat1,lng1|lat2,lng2|lat3,lng3
# E_RUNTIME 在一个时间段设置，starttime,endtime

CREATE TABLE TB_EFENCE
(
E_ID INT PRIMARY KEY AUTO_INCREMENT, 
E_IMEI BIGINT NOT NULL,
E_PNUM INT NOT NULL,
E_POINTS VARCHAR(256) NOT NULL,
E_RUNTIME VARCHAR(64) NOT NULL
);

DROP TABLE TB_EFENCE;

# TB_TIMETABLE 学校时间作息表
# T_ID 自增主键
# T_IMEI IMEI号，BIGINT
# T_MORNING 上午运行时间 mtime1,mtime1
# T_MORN_TURN 上午运行开关
# T_AFTERNOON 下午运行时间 atime2,atime2, 
# T_NOON_TURN 上午运行开关
# T_DAILY 作息天

CREATE TABLE TB_TIMETABLE
(
T_ID INT PRIMARY KEY AUTO_INCREMENT, 
T_IMEI BIGINT NOT NULL UNIQUE,
T_MORNING VARCHAR(32) DEFAULT '08-30-00|12-00-00',
T_MORN_TURN CHAR DEFAULT 1,
T_AFTERNOON VARCHAR(32) DEFAULT '13-30-00|18-00-00',
T_NOON_TURN CHAR DEFAULT 1,
T_DAILY VARCHAR(128) DEFAULT 'Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday'
);

DROP TABLE TB_TIMETABLE;


# TB_SCHEDULE 提醒闹钟
# S_ID 自增变量
# S_IMEI IMEI号，BIGINT
# S_DAILY 使用的日期
# S_TIME 具体提示时间
# S_DETAILS 闹钟提示的信息

CREATE TABLE TB_SCHEDULE
(
S_ID INT PRIMARY KEY AUTO_INCREMENT,
S_IMEI BIGINT NOT NULL,
S_DAILY VARCHAR(128) NOT NULL,
S_TIME VARCHAR(16) NOT NULL,
S_DETAILS VARCHAR(128) NOT NULL 
);

DROP TABLE TB_SCHEDULE;

# TB_PHONEBOOK 此表格用于手表端显示的电话号码，并不用做语音发送的绑定关系
# P_ID 自增变量
# P_IMEI IMEI号，BIGINT
# P_NAME 称呼
# P_PNUM 手机号码
# P_ADMIN 是否为管理员 1为管理员，0不为管理员
# P_GROUP 是否是通过绑定关系形成的 1为是的group里面的，0为手动添加的。

CREATE TABLE TB_PHONEBOOK
(
P_ID INT PRIMARY KEY AUTO_INCREMENT,
P_IMEI BIGINT NOT NULL,
P_NAME VARCHAR(16) NOT NULL,
P_PNUM VARCHAR(30) NOT NULL,
P_ADMIN CHAR DEFAULT 0,
P_GROUP CHAR DEFAULT 0
);

DROP TABLE TB_PHONEBOOK;


# TB_GROUP 群组关系 
# G_ID   自增主键
# G_IMEI IMEI号
# G_USER App id
# G_ADMIN 是否为管理员 
# G_NAME 称呼
CREATE TABLE TB_GROUP
(
G_ID INT PRIMARY KEY AUTO_INCREMENT,
G_IMEI BIGINT NOT NULL,
G_USER BIGINT NOT NULL,
G_NAME VARCHAR(16) NOT NULL,
G_ADMIN CHAR NOT NULL DEFAULT 0
);

DROP TABLE TB_GROUP;


# TB_SETUP 设置手表开关机列表
# S_ID 自增变量
# S_IMEI IMEI号，BIGINT
# S_TURN 是否开启定时开关机功能 1为开启，0为关闭
# S_ONTIME 开机时间
# S_OFFTIME 关机时间
CREATE TABLE TB_SETUP
(
S_ID INT PRIMARY KEY AUTO_INCREMENT,
S_IMEI BIGINT NOT NULL UNIQUE,
S_TURN CHAR DEFAULT 0,
S_ONTIME VARCHAR(16) DEFAULT '08-00-00',
S_OFFTIME VARCHAR(16) DEFAULT '20-30-00'
);

DROP TABLE TB_SETUP;

# TB_RUNTIME 运行时参数
# R_ID 自增主键
# R_IMEI IMEI号， bigint
# R_AUTOCONN 自动接听，开启为1，关闭为0，
# R_LOSSREPORT 挂失后，开机发送地址位置 开启为1，关闭为0，
# R_LIGHTPANEL 亮屏时间，20s，
# R_BELL 短信与电话震动与声音提醒，(短信震动，短信声音 电话震动，电话声音) '00,11', 0为关闭，1为开启
# R_TARGETSTEP 目前步数
CREATE TABLE TB_RUNTIME
(
R_ID INT PRIMARY KEY AUTO_INCREMENT,
R_IMEI BIGINT NOT NULL UNIQUE,
R_AUTOCONN CHAR DEFAULT 1,
R_LOSSREPORT CHAR DEFAULT 0,
R_LIGHTPANEL INT DEFAULT 20,
R_BELL VARCHAR(6) DEFAULT '11,11',
R_TARGETSTEP INT DEFAULT 5000
);

# TB_COMMON_MSG 群组消息
# MSG_ID 消息列表
# SENDER_ID 发送者
# GROUP_ID 所在群组ID，此ID与硬件设备IMEI ID一致
# MSG_DETAILS 需要转发的JSON数据全部存储在这里
# 这部分设计请参考Natty协议文档 v3.2 5.3节
CREATE TABLE TB_COMMON_MSG
(
MSG_ID INT PRIMARY KEY AUTO_INCREMENT,
SENDER_ID BIGINT NOT NULL,
GROUP_ID BIGINT NOT NULL,
MSG_DETAILS VARCHAR(1024) NOT NULL,
MSG_TIME TIMESTAMP DEFAULT NOW()
);

DROP TABLE TB_COMMON_MSG;

# TB_COMMON_OFFLINE_MSG 用于存储离线客户端的数据
# MSG_ID 对应TB_COMMON_MSG的MSG_ID，为了减少外键约束性能消耗，这里没有做外键
# USER_ID 接受消息的客户端ID
CREATE TABLE TB_COMMON_OFFLINE_MSG 
(
MSG_ID INT NOT NULL,
USER_ID BIGINT NOT NULL
);

# TB_VOICE_MSG 用于存储语音数据
# MSG_ID 消息列表
# SENDER_ID 发送者
# GROUP_ID 所在群组ID，此ID与硬件设备IMEI ID一致
# MSG_DETAILS 需要转发的语音数据路径
# 这部分设计请参考Natty协议文档 v3.2 5.1节 
CREATE TABLE TB_VOICE_MSG
(
MSG_ID INT PRIMARY KEY AUTO_INCREMENT,
SENDER_ID BIGINT NOT NULL,
GROUP_ID BIGINT NOT NULL,
MSG_DETAILS VARCHAR(1024) NOT NULL,
MSG_TIME TIMESTAMP DEFAULT NOW()
);

DROP TABLE TB_VOICE_MSG;

CREATE TABLE TB_VOICE_OFFLINE_MSG 
(
MSG_ID INT NOT NULL,
USER_ID BIGINT NOT NULL
);


# TB_LOCATION 存储定位信息
# L_ID 自增主键
# L_TYPE 定位类型
# L_INFO 基站信息与wifi信息
# L_LNGLAT 解析完成后的经纬度信息 
# L_DETAILS 解析完成后的城市信息
# L_L_TIME 定位时间 
CREATE TABLE TB_LOCATION
(
L_ID INT PRIMARY KEY AUTO_INCREMENT,
L_IMEI BIGINT NOT NULL,
L_TYPE CHAR NOT NULL,
L_INFO VARCHAR(1024),
L_LNGLAT VARCHAR(32) NOT NULL,
L_DETAILS VARCHAR(512),
L_TIME TIMESTAMP DEFAULT NOW()
);

# TB_HEARTRATE 存储心率数据
# H_ID 自增主键
# H_IMEI IMEI号
# H_VALUE 心率数据 
# H_TIME 测试时间
CREATE TABLE TB_HEARTRATE
(
H_ID INT PRIMARY KEY AUTO_INCREMENT,
H_IMEI BIGINT NOT NULL,
H_VALUE INT NOT NULL,
H_TIME TIMESTAMP DEFAULT NOW()
);

DROP TABLE TB_HEARTRATE;

# TB_STEP 存储心率数据
# S_ID 自增主键
# S_IMEI IMEI号
# S_VALUE 计步数据 
# S_TIME 测试的时间
CREATE TABLE TB_STEP 
(
S_ID INT PRIMARY KEY AUTO_INCREMENT,
S_IMEI BIGINT NOT NULL,
S_VALUE INT NOT NULL,
S_TIME TIMESTAMP DEFAULT NOW()
);

DROP TABLE TB_STEP;

# TB_ICCID_PHNUM 此表的数据有运营商那边提供过来，直接导入。如果SIM卡留卡槽出来，此表将不再使用
# I_PHONENUMBER 电话号码
# I_ICCID ICCID
CREATE TABLE TB_ICCID_PHNUM
(
I_PHONENUMBER VARCHAR(16)  NOT NULL UNIQUE,
I_ICCID	VARCHAR(20) NOT NULL UNIQUE
);

# TB_DEVICE 存储手表相关信息 
# D_ID 自增主键
# D_IMEI IMEI号
# D_ICCID ICCID 请求的时候，需要在这里把ICCID与IMEI号形成一对一的关系 
# D_ACTSTATUS 激活状态，1为激活状态，0为没有激活 
# D_ACTIME 激活的时间 
# D_ONSTATUS 在线状态， 1为在线状态，0为离线状态 
# D_ONTIME 在线时间，改变在线状态的时候，在线状态为1的时候，在线时间，在线状态为0的时候，为离线时间。
# D_TYPE 设备类型，0为儿童手表，1为老人手表, 
CREATE TABLE TB_DEVICE
(
D_ID INT PRIMARY KEY AUTO_INCREMENT,
D_IMEI BIGINT NOT NULL UNIQUE,
D_ICCID VARCHAR(20),
D_ACTSTATUS CHAR DEFAULT 0,
D_ACTIME DATETIME,
D_ONSTATUS CHAR DEFAULT 0,
D_ONTIME DATETIME,
D_TYPE INT DEFAULT 0
);

DROP TABLE TB_DEVICE;



# TB_PERSON 手表使用者的基本信息 
# P_ID INT PRIMARY KEY AUTO_INCREMENT,
# P_WATCH 使用手表的IMEI号
# P_NAME 使用者的姓名 
# P_BIRTHDAY 使用者的出生日期 
# P_GRADE 使用者的年纪 
# P_SCHOOL 所在学校 
CREATE TABLE TB_CHILDREN
(
P_ID INT PRIMARY KEY AUTO_INCREMENT,
P_WATCH BIGINT,
P_NAME VARCHAR(32),
P_GENDER VARCHAR(8),
P_BIRTHDAY VARCHAR(16),
P_GRADE VARCHAR(16),
P_SCHOOL VARCHAR(32),
P_ICON VARCHAR(256)
);

DROP TABLE TB_CHILDREN

#ALTER TABLE TB_PERSON ADD P_ICON VARCHAR(256);

###################################################################


INSERT TB_ICCID_PHNUM VALUES('15521410021', '1642510065001');
INSERT TB_ICCID_PHNUM VALUES('15521410023', '1642510065002');
INSERT TB_ICCID_PHNUM VALUES('15521410024', '1642510065003');
INSERT TB_ICCID_PHNUM VALUES('15521410025', '1642510065004');
INSERT TB_ICCID_PHNUM VALUES('15521410026', '1642510065005');

INSERT TB_ICCID_PHNUM VALUES('15521410027', '1642510065006');
INSERT TB_ICCID_PHNUM VALUES('15521410028', '1642510065007');
INSERT TB_ICCID_PHNUM VALUES('15521410029', '1642510065008');
INSERT TB_ICCID_PHNUM VALUES('15521410030', '1642510065009');



DELIMITER $$
CREATE PROCEDURE PROC_INSERT_EFENCE(IN VIMEI BIGINT, IN NUM INT, IN POINTS VARCHAR(256), 
					IN RUNTIME VARCHAR(64))
BEGIN
	INSERT TB_EFENCE(E_IMEI, E_PNUM, E_POINTS, E_RUNTIME) VALUE(VIMEI, NUM, POINTS, RUNTIME);
END;

SELECT * FROM TB_EFENCE

DROP PROCEDURE PROC_INSERT_EFENCE

DELIMITER $$
CREATE PROCEDURE PROC_DELETE_EFENCE(IN IMEI BIGINT, IN ID INT)
BEGIN
	DELETE FROM TB_EFENCE WHERE E_ID=ID AND IMEI=E_IMEI;
END;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_EFENCE(IN IMEI BIGINT, IN ID INT, IN NUM INT, IN POINTS VARCHAR(256), 
					IN RUNTIME VARCHAR(64))
BEGIN
	UPDATE TB_EFENCE SET E_PNUM=NUM, E_POINTS=POINTS, E_RUNTIME=RUNTIME WHERE E_IMEI=IMEI AND E_ID=ID;
END;

DROP PROCEDURE PROC_UPDATE_EFENCE;

DELIMITER $$
CREATE PROCEDURE PROC_SELECT_EFENCE(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_EFENCE WHERE IMEI=E_IMEI;
END;

SHOW PROCEDURE STATUS;


# TB_TIMETABLE每一个激活的IMEI号，会自动增加数据，所以该部分删除与添加API不对外开放 
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_TIMETABLE(IN IMEI BIGINT)
BEGIN
	INSERT TB_TIMETABLE(T_IMEI) VALUE(IMEI);
END;

SELECT * FROM TB_TIMETABLE

DELIMITER $$
CREATE PROCEDURE PROC_DELETE_TIMETABLE(IN IMEI BIGINT)
BEGIN
	DELETE FROM TB_TIMETABLE WHERE T_IMEI=IMEI;
END;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_TIMETABLE(IN IMEI BIGINT, IN MORNING VARCHAR(32), IN MORN_TURN CHAR,
			IN AFTERNOON VARCHAR(32), IN NOON_TURN CHAR, IN DAILY VARCHAR(128))
BEGIN
	UPDATE TB_TIMETABLE SET T_MORNING=MORNING, T_MORN_TURN=MORN_TURN, T_AFTERNOON=AFTERNOON, 
			T_NOON_TURN=NOON_TURN, T_DAILY=DAILY WHERE T_IMEI=IMEI;
END;


DELIMITER $$
CREATE PROCEDURE PROC_SELECT_TIMETABLE(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_TIMETABLE WHERE T_IMEI=IMEI;
END;


#CREATE TABLE TB_SCHEDULE
#(
#S_ID INT PRIMARY KEY AUTO_INCREMENT,
#S_IMEI BIGINT NOT NULL,
#S_DAILY VARCHAR(128) NOT NULL,
#S_TIME VARCHAR(16) NOT NULL,
#S_DETAILS VARCHAR(128) NOT NULL 
#);
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_SCHEDULE(IN IMEI BIGINT, IN DAILY VARCHAR(128), IN DTIME VARCHAR(16), IN DETAILS VARCHAR(128))
BEGIN
	INSERT TB_SCHEDULE(S_IMEI, S_DAILY, S_TIME, S_DETAILS) VALUE(IMEI, DAILY, DTIME, DETAILS);
END;

DROP PROCEDURE PROC_INSERT_SCHEDULE
SELECT * FROM TB_SCHEDULE

DELIMITER $$
CREATE PROCEDURE PROC_DELETE_SCHEDULE(IN IMEI BIGINT, IN ID INT)
BEGIN
	DELETE FROM TB_SCHEDULE WHERE S_ID=ID AND S_IMEI=IMEI;
END;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_SCHEDULE(IN IMEI BIGINT, IN ID INT, IN DAILY VARCHAR(128), IN DTIME VARCHAR(16), IN DETAILS VARCHAR(128))
BEGIN
	UPDATE TB_SCHEDULE SET S_DAILY=DAILY, S_TIME=DTIME, S_DETAILS=DETAILS WHERE S_IMEI=IMEI AND S_ID=ID;
END;

DELIMITER $$
CREATE PROCEDURE PROC_SELECT_SCHEDULE(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_SCHEDULE WHERE S_IMEI=IMEI;
END;

# CREATE TABLE TB_PHONEBOOK
# (
# P_ID INT PRIMARY KEY AUTO_INCREMENT,
# P_IMEI BIGINT NOT NULL,
# P_NAME VARCHAR(16) NOT NULL,
# P_PNUM VARCHAR(16) NOT NULL,
# P_ADMIN CHAR DEFAULT 0,
# P_GROUP CHAR DEFAULT 0
# );
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_PHONEBOOK(IN IMEI BIGINT, IN PNAME VARCHAR(128), IN PNUM VARCHAR(16))
BEGIN
	INSERT TB_PHONEBOOK(P_IMEI, P_NAME, P_PNUM) VALUE(IMEI, PNAME, PNUM);
END;

DROP PROCEDURE PROC_INSERT_PHONEBOOK;

DELIMITER $$
CREATE PROCEDURE PROC_DELETE_PHONEBOOK(IN IMEI BIGINT, IN ID INT)
BEGIN
	DELETE FROM TB_PHONEBOOK WHERE P_IMEI=IMEI AND P_ID=ID;
END;

DROP PROCEDURE PROC_DELETE_PHONEBOOK;

# 保留 
DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_PHONEBOOK_ADMIN(IN IMEI BIGINT, IN ID INT, IN USERID BIGINT)
BEGIN
	UPDATE TB_PHONEBOOK SET P_ADMIN=0 WHERE P_IMEI=IMEI AND P_ADMIN=1; # 取消电话本中管理员权限 
	UPDATE TB_PHONEBOOK SET P_ADMIN=1 WHERE P_IMEI=IMEI AND P_ID=ID; #设置电话本中管理员权限 
    
    UPDATE TB_GROUP SET G_ADMIN=0 WHERE G_IMEI=IMEI AND G_ADMIN=1;  # 取消绑定关系中管理员权限 
    UPDATE TB_GROUP SET G_ADMIN=1 WHERE G_IMEI=IMEI AND G_USER=USERID; #设置绑定关系中管理员权限 
END;

DROP PROCEDURE PROC_UPDATE_PHONEBOOK_ROLE;

# 保留 
DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_PHONEBOOK(IN IMEI BIGINT, IN ID INT, IN PNAME VARCHAR(128), IN PNUM VARCHAR(16))
BEGIN
	UPDATE TB_PHONEBOOK SET P_NAME=PNAME,P_PNUM=PNUM WHERE P_IMEI=IMEI AND P_ID=ID;
END;

DROP PROCEDURE PROC_UPDATE_PHONEBOOK;


DELIMITER $$
CREATE PROCEDURE PROC_SELECT_PHONEBOOK(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_PHONEBOOK WHERE P_IMEI=IMEI;
END;

DROP PROCEDURE PROC_SELECT_PHONEBOOK;

DROP TABLE TB_PHONEBOOK 

DROP TABLE TB_GROUP
# 如果是group第一个绑定关系设置为管理员 
# 如果不是设置普通用户 
# 通过USERID查找响应的手机号码 
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_GROUP(IN IMEI BIGINT, IN USERID BIGINT, IN GNAME VARCHAR(16))
BEGIN
    DECLARE EXIST INT;
    DECLARE UID BIGINT;
    DECLARE RESULT INT;
    DECLARE PHNUM VARCHAR(30);
    
    
    SELECT COUNT(*) INTO @EXIST FROM qjk.tb_appuser_info WHERE member_id=USERID;
    IF @EXIST = 0 # USERID不存在 
    THEN
		SET @RESULT = 1;
    ELSE
		SELECT COUNT(*) INTO @EXIST FROM NATTYDB.TB_DEVICE WHERE D_IMEI=IMEI;
        IF @EXIST = 0 # IMEI 不存在 
        THEN
			SET @RESULT = 2; 
		ELSE
			SELECT D_ACTSTATUS INTO @EXIST FROM NATTYDB.TB_DEVICE WHERE D_IMEI=IMEI;
            IF @EXIST = 0 # IMEI 尚未激活
            THEN	
				SET @RESULT = 4;
            ELSE
				SELECT COUNT(*) INTO @EXIST FROM NATTYDB.TB_GROUP WHERE G_IMEI=IMEI AND G_ID=USERID;
                IF @EXIST = 0
                THEN 
					SELECT COUNT(*) INTO @EXIST FROM NATTYDB.TB_GROUP WHERE G_IMEI=IMEI;
					IF @EXIST = 0 # 尚未绑定任何App
					THEN
						INSERT TB_GROUP(G_IMEI, G_USER, G_NAME, G_ADMIN) VALUE(IMEI, USERID, GNAME, 1);
						SELECT username INTO @PHNUM FROM qjk.tb_member where id=USERID;
						INSERT TB_PHONEBOOK(P_IMEI, P_NAME, P_PNUM, P_ADMIN, P_GROUP) VALUE(IMEI, GNAME, @PHNUM, 1, 1);
					ELSE
						INSERT TB_GROUP(G_IMEI, G_USER, G_NAME, G_ADMIN) VALUE(IMEI, USERID, GNAME, 0);
						SELECT username INTO @PHNUM FROM qjk.tb_member where id=USERID;
						INSERT TB_PHONEBOOK(P_IMEI, P_NAME, P_PNUM, P_ADMIN, P_GROUP) VALUE(IMEI, GNAME, @PHNUM, 0, 1);
						
					END IF;
                    SET @RESULT = 0;
				ELSE # IMEI已经与App绑定
					SET @RESULT = 3;
				END IF;
			END IF;
		END IF;
	END IF;
    SELECT @RESULT;
END;

DROP PROCEDURE PROC_INSERT_GROUP;



SELECT * FROM TB_PHONEBOOK

CALL PROC_INSERT_GROUP(240207489189498949, 11107, '爸爸')
CALL PROC_INSERT_GROUP(240207489189498949, 11029, '妈妈')

SELECT * FROM qjk.tb_appuser_info

SELECT * FROM TB_DEVICE WHERE D_IMEI=240207489189498949;
SELECT D_ACTSTATUS INTO @RSTATUS FROM NATTYDB.TB_DEVICE WHERE D_IMEI=240207489189498949;
SELECT @RSTATUS
#SELECT username FROM qjk.tb_member;


DELIMITER $$
CREATE PROCEDURE PROC_DELETE_GROUP(IN IMEI BIGINT, IN USERID BIGINT)
BEGIN
	DELETE FROM TB_GROUP WHERE G_IMEI=IMEI AND G_USER=USERID;
END;


#TB_SETUP 与IMEI号是一对一的定制开关机策略，在设备激活时，自动添加数据，此接口不对外开放
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_SETUP(IN IMEI BIGINT)
BEGIN
	INSERT TB_SETUP(S_IMEI) VALUE(IMEI);
END;

# TB_SETUP 与IMEI号自动删除，再数据退货以后，需要全部清除数据，此API也不对外开放  
DELIMITER $$
CREATE PROCEDURE PROC_DELETE_SETUP(IN IMEI BIGINT)
BEGIN
	DELETE FROM TB_SETUP WHERE S_IMEI=IMEI;
END;

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_SETUP(IN IMEI BIGINT, IN TURN CHAR, IN ONTIME VARCHAR(16), IN OFFTIME VARCHAR(16))
BEGIN
	UPDATE TB_SETUP SET S_TURN=TURN,S_ONTIME=ONTIME,S_OFFTIME=OFFTIME WHERE S_IMEI=IMEI;
END;

DELIMITER $$
CREATE PROCEDURE PROC_SELECT_SETUP(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_SETUP WHERE S_IMEI=IMEI;
END;



#CREATE TABLE TB_RUNTIME
#(
#R_ID INT PRIMARY KEY AUTO_INCREMENT,
#R_IMEI BIGINT NOT NULL UNIQUE,
#R_AUTOCONN CHAR DEFAULT 1,
#R_LOSSREPORT CHAR DEFAULT 0,
#R_LIGHTPANEL INT DEFAULT 20,
#R_BELL VARCHAR(6) DEFAULT '11,11',
#R_TARGETSTEP INT DEFAULT 5000
#);
# TB_RUNTIME 与运行时参数，在设备激活时，自动添加数据，此接口不对外开放
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_RUNTIME(IN IMEI BIGINT)
BEGIN
	INSERT TB_RUNTIME(R_IMEI) VALUE(IMEI);
END;

# TB_RUNTIME 与IMEI号自动删除，再数据退货以后，需要全部清除数据，此API也不对外开放
DELIMITER $$
CREATE PROCEDURE PROC_DELETE_RUNTIME(IN IMEI BIGINT)
BEGIN
	DELETE FROM TB_RUNTIME WHERE R_IMEI=IMEI;
END;

DROP PROCEDURE PROC_DELETE_RUNTIME

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_RUNTIME(IN IMEI BIGINT, IN AUTOCONN CHAR, IN LOSSREPORT CHAR, 
				IN LIGHTPANEL INT, IN BELL VARCHAR(6), IN TARGETSTEP INT)
BEGIN
	UPDATE TB_RUNTIME SET R_AUTOCONN=AUTOCONN, R_LOSSREPORT=LOSSREPORT, R_LIGHTPANEL=LIGHTPANEL,
					R_BELL=BELL, R_TARGETSTEP=TARGETSTEP WHERE R_IMEI=IMEI;
END;

DROP PROCEDURE PROC_UPDATE_RUNTIME

# 自动接听的功能
DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_RUNTIME_AUTOCONN(IN IMEI BIGINT, IN AUTOCONN CHAR)
BEGIN
	UPDATE TB_RUNTIME SET R_AUTOCONN=AUTOCONN WHERE R_IMEI=IMEI;
END;

# 丢失后寻找 
DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_RUNTIME_LOSSREPORT(IN IMEI BIGINT, IN LOSSREPORT CHAR)
BEGIN
	UPDATE TB_RUNTIME SET R_LOSSREPORT=LOSSREPORT WHERE R_IMEI=IMEI;
END;

# 量屏时间 
DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_RUNTIME_LIGHTPANEL(IN IMEI BIGINT, IN LIGHTPANEL INT)
BEGIN
	UPDATE TB_RUNTIME SET R_LIGHTPANEL=LIGHTPANEL WHERE R_IMEI=IMEI;
END;

# 铃声提示方式 
DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_RUNTIME_BELL(IN IMEI BIGINT, IN BELL VARCHAR(6))
BEGIN
	UPDATE TB_RUNTIME SET R_BELL=BELL WHERE R_IMEI=IMEI;
END;

# 设置目标步数 
DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_RUNTIME_TARGETSTEP(IN IMEI BIGINT, IN TARGETSTEP INT)
BEGIN
	UPDATE TB_RUNTIME SET R_TARGETSTEP=TARGETSTEP WHERE R_IMEI=IMEI;
END;

# 查询运行参数 
DELIMITER $$
CREATE PROCEDURE PROC_SELECT_RUNTIME(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_RUNTIME WHERE R_IMEI=IMEI;
END;


# TB_COMMON_MSG 群组消息
# MSG_ID 消息列表
# SENDER_ID 发送者
# GROUP_ID 所在群组ID，此ID与硬件设备IMEI ID一致
# MSG_DETAILS 需要转发的JSON数据全部存储在这里
# 这部分设计请参考Natty协议文档 v3.2 5.3节
# CREATE TABLE TB_COMMON_MSG
# (
# MSG_ID INT PRIMARY KEY AUTO_INCREMENT,
# SENDER_ID BIGINT NOT NULL,
# GROUP_ID BIGINT NOT NULL,
# MSG_DETAILS VARCHAR(1024) NOT NULL,
# MSG_TIME TIMESTAMP DEFAULT NOW()
# );

# 把广播数据插入到msg中，然后全部存入到offline_msg数据中 
# 
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_COMMON_MSG(IN SID BIGINT, IN GID BIGINT, IN DETAILS VARCHAR(1024))
BEGIN
	DECLARE MSGID INT;
    
START TRANSACTION;
	INSERT TB_COMMON_MSG(SENDER_ID, GROUP_ID, MSG_DETAILS) VALUE(SID, GID, DETAILS);
    SELECT LAST_INSERT_ID() INTO @MSGID;
COMMIT;

	IF SID=GID 
    THEN # 手表发送数据 ,GID 为group id
        INSERT INTO TB_COMMON_OFFLINE_MSG SELECT @MSGID, G_USER FROM TB_GROUP WHERE G_IMEI=GID;
    ELSE # App发送请求数据 ,
		INSERT INTO TB_COMMON_OFFLINE_MSG SELECT @MSGID, G_USER FROM TB_GROUP WHERE G_IMEI=GID AND G_USER!=SID;
    END IF;
END;

SELECT * FROM TB_COMMON_MSG

DROP PROCEDURE PROC_INSERT_COMMON_MSG

INSERT INTO TB_COMMON_OFFLINE_MSG SELECT @MSGID, G_USER FROM TB_GROUP  WHERE G_IMEI=240207489189498949 AND G_USER!=11029;


CALL PROC_INSERT_COMMON_MSG(11029, 240207489189498949, '你好');

START TRANSACTION;
	INSERT TB_COMMON_MSG(SENDER_ID, GROUP_ID, MSG_DETAILS) VALUE(11029, 240207489189498949, '你好');
    SELECT LAST_INSERT_ID() INTO @MSGID;
COMMIT;

DROP TABLE TB_COMMON_OFFLINE_MSG

SELECT * FROM TB_COMMON_OFFLINE_MSG

DELETE FROM TB_VOICE_OFFLINE_MSG WHERE MSG_ID=0


# CREATE TABLE TB_COMMON_OFFLINE_MSG 
# (
# MSG_ID INT NOT NULL,
# USER_ID BIGINT NOT NULL
# );
# 删除离线处理成功的消息 
DELIMITER $$
CREATE PROCEDURE PROC_DELETE_COMMON_OFFLINE_MSG(IN MSGID INT , IN USERID BIGINT)
BEGIN
	DELETE FROM TB_COMMON_OFFLINE_MSG WHERE MSG_ID=MSGID AND USER_ID=USERID;
END;


# CREATE TABLE TB_VOICE_MSG
# (
# MSG_ID INT PRIMARY KEY AUTO_INCREMENT,
# SENDER_ID BIGINT NOT NULL,
# GROUP_ID BIGINT NOT NULL,
# MSG_DETAILS VARCHAR(1024) NOT NULL,
# MSG_TIME TIMESTAMP DEFAULT NOW()
# );
# DROP TABLE TB_VOICE_MSG;
# CREATE TABLE TB_VOICE_OFFLINE_MSG 
# (
# MSG_ID INT NOT NULL,
# USER_ID BIGINT NOT NULL
# );

DELIMITER $$
CREATE PROCEDURE PROC_INSERT_VOICE_MSG(IN SID BIGINT, IN GID BIGINT, IN DETAILS VARCHAR(1024))
BEGIN
	DECLARE MSGID INT;
    
START TRANSACTION;
	INSERT TB_VOICE_MSG(SENDER_ID, GROUP_ID, MSG_DETAILS) VALUE(SID, GID, DETAILS);
    SELECT LAST_INSERT_ID() INTO @MSGID;
COMMIT;

	IF SID=GID 
    THEN # 手表发送数据 ,GID 为group id
        INSERT INTO TB_VOICE_OFFLINE_MSG SELECT @MSGID, G_USER FROM TB_GROUP WHERE G_IMEI=GID;
    ELSE # App发送请求数据 ,
		INSERT INTO TB_VOICE_OFFLINE_MSG SELECT @MSGID, G_USER FROM TB_GROUP WHERE G_IMEI=GID AND G_USER!=SID;
		INSERT INTO TB_VOICE_OFFLINE_MSG VALUE(@MSGID, GID);
    END IF;
END;

DELIMITER $$
CREATE PROCEDURE PROC_DELETE_VOICE_OFFLINE_MSG(IN MSGID INT , IN USERID BIGINT)
BEGIN
	DELETE FROM TB_VOICE_OFFLINE_MSG WHERE MSG_ID=MSGID AND USER_ID=USERID;
END;

# DROP PROCEDURE PROC_INSERT_COMMON_MSG

# CREATE TABLE TB_PHONEBOOK
# (
# P_ID INT PRIMARY KEY AUTO_INCREMENT,
# P_IMEI BIGINT NOT NULL,
# P_NAME VARCHAR(16) NOT NULL,
# P_PNUM VARCHAR(16) NOT NULL,
# P_ADMIN CHAR NOT NULL DEFAULT 0,
# P_GROUP CHAR NOT NULL DEFAULT 1
# );
# CREATE TABLE TB_GROUP
# (
# G_ID INT PRIMARY KEY AUTO_INCREMENT,
# G_IMEI BIGINT NOT NULL,
# G_USER BIGINT NOT NULL,
# G_NAME VARCHAR(16)
# );

# TB_PHONEBOOK
# 设计方式如下：
# 在绑定手表的时候，添加到TB_GROUP，通过G_USER获取用户注册时，使用者的手机号码，再添加到TB_PHONEBOOK
# 管理员的关系应该做到TB_PHONEBOOK中，
# P_NAME与G_NAME两个需要同时存在的。这两个称呼在不同地方显示的，不做更改。

# CREATE TABLE TB_DEVICE
# (
# D_ID INT PRIMARY KEY AUTO_INCREMENT,
# D_IMEI BIGINT NOT NULL,
# D_ICCID VARCHAR(20),
# D_ACTSTATUS CHAR DEFAULT 0,
# D_ACTIME DATETIME,
# D_ONSTATUS CHAR DEFAULT 0,
# D_ONTIME DATETIME,
# D_TYPE INT DEFAULT 0
# );
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_DEVICE(IN VIMEI VARCHAR(16))
BEGIN
	DECLARE WATCH_ID BIGINT;
	SELECT CONV(VIMEI, 16, 10) INTO @WATCH_ID;
    INSERT TB_DEVICE(D_IMEI) VALUE(@WATCH_ID);
END;

DROP PROCEDURE PROC_INSERT_DEVICE; 

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_DEVICE_ACTIVATE(IN IMEI BIGINT)
BEGIN
	DECLARE ACTIVE CHAR;
    DECLARE RESULT INT;
    
    SELECT D_ACTSTATUS INTO @ACTIVE FROM TB_DEVICE WHERE D_IMEI=IMEI;
    IF @ACTIVE=1 # 已经激活
    THEN # 
		SET @RESULT=1;
    ELSE 
    START TRANSACTION;
		UPDATE TB_DEVICE SET D_ACTSTATUS=1, D_ACTIME=NOW() WHERE D_IMEI=IMEI;
        CALL PROC_INSERT_RUNTIME(IMEI); # 插入运行时默认数据 
        CALL PROC_INSERT_TIMETABLE(IMEI); # 
        CALL PROC_INSERT_SETUP(IMEI); #
	COMMIT;
        SET @RESULT=0;
    END IF;
    SELECT @RESULT;
END;

DROP PROCEDURE PROC_UPDATE_DEVICE_ACTIVATE;

SELECT D_ACTSTATUS INTO @ACTIVE FROM TB_DEVICE WHERE D_IMEI=240207489205306960;
SELECT @ACTIVE

CALL PROC_UPDATE_DEVICE_ACTIVATE(240207489205306960);

DELETE FROM TB_TIMETABLE WHERE T_IMEI=240207489205306960;
DELETE FROM TB_RUNTIME WHERE R_IMEI=240207489205306960;

SELECT * FROM TB_DEVICE;

SELECT * FROM TB_DEVICE WHERE D_IMEI=240207489189498949;
DROP PROCEDURE PROC_UPDATE_DEVICE_ACTIVATE
#DELIMITER $$

CALL PROC_UPDATE_DEVICE_CLEAR(240207489189498949)

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_DEVICE_CLEAR(IN IMEI BIGINT)
BEGIN
	DECLARE ACTIVE CHAR;
    SELECT D_ACTSTATUS INTO @ACTIVE FROM TB_DEVICE WHERE D_IMEI=IMEI;
    IF @ACTIVE=0 # 没有激活
    THEN # 
		SET @RESULT=1;
    ELSE 
		UPDATE TB_DEVICE SET D_ACTSTATUS=0, D_ACTIME=NOW(), D_ONSTATUS=0, D_ONTIME=NOW()  WHERE D_IMEI=IMEI;
		
        START TRANSACTION;
        
        SET SQL_SAFE_UPDATES=0;
        
        CALL PROC_DELETE_RUNTIME(IMEI); # 插入运行时默认数据 
        CALL PROC_DELETE_TIMETABLE(IMEI); # 
        CALL PROC_DELETE_SETUP(IMEI); #
        
        DELETE FROM TB_EFENCE WHERE E_IMEI=IMEI;
        DELETE FROM TB_PHONEBOOK WHERE P_IMEI=IMEI;
        DELETE FROM TB_SCHEDULE WHERE S_IMEI=IMEI;
        
        DELETE FROM TB_VOICE_OFFLINE_MSG WHERE USER_ID=IMEI;
        DELETE FROM TB_COMMON_OFFLINE_MSG WHERE USER_ID=IMEI;
        DELETE FROM TB_GROUP WHERE G_IMEI=IMEI;
        DELETE FROM TB_CHILDREN WHERE P_WATCH=IMEI;
        
        SET SQL_SAFE_UPDATES=1;
        
        COMMIT;
    END IF;
END;


CALL PROC_INSERT_DEVICE('355637051875045');

CALL PROC_INSERT_DEVICE('355637052788650');
CALL PROC_INSERT_DEVICE('355637052238805');
CALL PROC_INSERT_DEVICE('355637053986139');
CALL PROC_INSERT_DEVICE('355637051954873');
CALL PROC_INSERT_DEVICE('355637050315845');
CALL PROC_INSERT_DEVICE('355637050957620');
CALL PROC_INSERT_DEVICE('355637051779775');
CALL PROC_INSERT_DEVICE('355637050990662');
CALL PROC_INSERT_DEVICE('355637052352275');
CALL PROC_INSERT_DEVICE('355637051751824');
CALL PROC_INSERT_DEVICE('355637053172771');
CALL PROC_INSERT_DEVICE('355637051959393');
CALL PROC_INSERT_DEVICE('355637050066828');
CALL PROC_INSERT_DEVICE('355637053837001');
CALL PROC_INSERT_DEVICE('355637052203973');
CALL PROC_INSERT_DEVICE('355637052552882');
CALL PROC_INSERT_DEVICE('355637052322294');
CALL PROC_INSERT_DEVICE('355637053258331');
CALL PROC_INSERT_DEVICE('355637052300829');
CALL PROC_INSERT_DEVICE('355637053324166');
CALL PROC_INSERT_DEVICE('355637051421907');
CALL PROC_INSERT_DEVICE('355637051218782');
CALL PROC_INSERT_DEVICE('355637052360179');
CALL PROC_INSERT_DEVICE('355637053770830');
CALL PROC_INSERT_DEVICE('355637053253753');
CALL PROC_INSERT_DEVICE('355637053243531');
CALL PROC_INSERT_DEVICE('355637051814002');
CALL PROC_INSERT_DEVICE('355637050917723');
CALL PROC_INSERT_DEVICE('355637050313964');
CALL PROC_INSERT_DEVICE('355637050861087');
CALL PROC_INSERT_DEVICE('355637052020864');
CALL PROC_INSERT_DEVICE('355637051318772');
CALL PROC_INSERT_DEVICE('355637051928398');
CALL PROC_INSERT_DEVICE('355637053099529');
CALL PROC_INSERT_DEVICE('355637052741766');
CALL PROC_INSERT_DEVICE('355637051095511');
CALL PROC_INSERT_DEVICE('355637052570801');
CALL PROC_INSERT_DEVICE('355637050696483');
CALL PROC_INSERT_DEVICE('355637052596087');
CALL PROC_INSERT_DEVICE('355637053665758');
CALL PROC_INSERT_DEVICE('355637052309762');
CALL PROC_INSERT_DEVICE('355637050180595');
CALL PROC_INSERT_DEVICE('355637052077633');
CALL PROC_INSERT_DEVICE('355637052331949');
CALL PROC_INSERT_DEVICE('355637051213999');
CALL PROC_INSERT_DEVICE('355637050534312');
CALL PROC_INSERT_DEVICE('355637051236446');
CALL PROC_INSERT_DEVICE('355637050606805');
CALL PROC_INSERT_DEVICE('355637053042222');
CALL PROC_INSERT_DEVICE('355637050183110');
CALL PROC_INSERT_DEVICE('355637050141639');
CALL PROC_INSERT_DEVICE('355637051577856');
CALL PROC_INSERT_DEVICE('355637050305044');
CALL PROC_INSERT_DEVICE('355637052160199');
CALL PROC_INSERT_DEVICE('355637052734571');
CALL PROC_INSERT_DEVICE('355637050179084');
CALL PROC_INSERT_DEVICE('355637050190883');
CALL PROC_INSERT_DEVICE('355637052567252');
CALL PROC_INSERT_DEVICE('355637053850822');
CALL PROC_INSERT_DEVICE('355637053301370');
CALL PROC_INSERT_DEVICE('355637052275286');
CALL PROC_INSERT_DEVICE('355637051277333');
CALL PROC_INSERT_DEVICE('355637050137413');
CALL PROC_INSERT_DEVICE('355637051370351');
CALL PROC_INSERT_DEVICE('355637053533402');
CALL PROC_INSERT_DEVICE('355637051234730');
CALL PROC_INSERT_DEVICE('355637053684577');
CALL PROC_INSERT_DEVICE('355637051694610');
CALL PROC_INSERT_DEVICE('355637053680864');
CALL PROC_INSERT_DEVICE('355637051052033');
CALL PROC_INSERT_DEVICE('355637052329596');
CALL PROC_INSERT_DEVICE('355637052607934');
CALL PROC_INSERT_DEVICE('355637050141381');
CALL PROC_INSERT_DEVICE('355637050070234');
CALL PROC_INSERT_DEVICE('355637053065843');
CALL PROC_INSERT_DEVICE('355637053672358');
CALL PROC_INSERT_DEVICE('355637050952407');
CALL PROC_INSERT_DEVICE('355637051945814');
CALL PROC_INSERT_DEVICE('355637053995130');
CALL PROC_INSERT_DEVICE('355637053843926');
CALL PROC_INSERT_DEVICE('355637052815651');
CALL PROC_INSERT_DEVICE('355637052868320');
CALL PROC_INSERT_DEVICE('355637050205483');
CALL PROC_INSERT_DEVICE('355637050975168');
CALL PROC_INSERT_DEVICE('355637052423068');
CALL PROC_INSERT_DEVICE('355637053543989');
CALL PROC_INSERT_DEVICE('355637051208528');
CALL PROC_INSERT_DEVICE('355637051162246');
CALL PROC_INSERT_DEVICE('355637053964243');
CALL PROC_INSERT_DEVICE('355637051245579');
CALL PROC_INSERT_DEVICE('355637053124186');
CALL PROC_INSERT_DEVICE('355637052992187');
CALL PROC_INSERT_DEVICE('355637053641338');
CALL PROC_INSERT_DEVICE('355637052079266');
CALL PROC_INSERT_DEVICE('355637051341121');
CALL PROC_INSERT_DEVICE('355637051184091');
CALL PROC_INSERT_DEVICE('355637053347282');
CALL PROC_INSERT_DEVICE('355637052565074');
CALL PROC_INSERT_DEVICE('355637053077715');
CALL PROC_INSERT_DEVICE('355637052788640');


# CREATE TABLE TB_LOCATION
# (
# L_ID INT PRIMARY KEY AUTO_INCREMENT,
# L_IMEI BIGINT NOT NULL,
# L_TYPE CHAR NOT NULL,
# L_INFO VARCHAR(1024),
# L_LNGLAT VARCHAR(32) NOT NULL,
# L_DETAILS VARCHAR(512),
# L_TIME DATETIME DEFAULT NOW()
# );

DROP TABLE TB_LOCATION

# 插入定位数据 
# 

DELIMITER $$
CREATE PROCEDURE PROC_INSERT_LOCATION(IN IMEI BIGINT, IN LTYPE CHAR, IN INFO VARCHAR(1024), 
		IN LNGLAT VARCHAR(32), IN DETAILS VARCHAR(512))
BEGIN
	INSERT TB_LOCATION(L_IMEI, L_TYPE, L_INFO, L_LNGLAT, L_DETAILS) VALUE(
					IMEI, LTYPE, INFO, L_LNGLAT, L_DETAILS);
END;

DROP PROCEDURE PROC_INSERT_LOCATION

# IMEI号对应的定位数据查询 
DELIMITER $$
CREATE PROCEDURE PROC_SELECT_LOCATION(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_LOCATION WHERE L_IMEI=IMEI;
END;


SELECT * FROM TB_CHILDREN;


SELECT * FROM TB_HEARTRATE;
# 心率数据 插入 
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_HEARTRATE(IN IMEI BIGINT, IN HVALUE INT)
BEGIN
	INSERT TB_HEARTRATE(H_IMEI, H_VALUE) VALUE(IMEI, HVALUE);
END;
# 心率数据 查询 
DELIMITER $$
CREATE PROCEDURE PROC_SELECT_HEARTRATE(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_HEARTRATE WHERE H_IMEI=IMEI;
END;

DROP PROCEDURE PROC_DELETE_HEARTRATE;


# 计步数据 插入 
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_STEP(IN IMEI BIGINT, IN SVALUE INT)
BEGIN
	INSERT TB_STEP(S_IMEI, S_VALUE) VALUE(IMEI, SVALUE);
END;

# 计步数据 查询 
DELIMITER $$
CREATE PROCEDURE PROC_SELECT_STEP(IN IMEI BIGINT)
BEGIN
	SELECT * FROM TB_STEP WHERE S_IMEI=IMEI;
END;

# SELECT * FROM TB_STEP;


SELECT * FROM TB_DEVICE;






