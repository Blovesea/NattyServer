


# MySql 数据建表脚本文件，后续采用MongoDB
# 后续NattyCloud需要存储做到 Redis + MySql/MongoDB
# 快速查找与插入数据


CREATE DATABASE NATTYDB;

USE NATTYDB;

# 目前NattyCloud，建立以下TABLE，(时间都精确到秒)
# Location, 手表定位信息 {WatchID, 经度, 纬度, 地理位置信息, 时间(精确到秒)}
# WatchUser, 手表的用户信息 {WatchID, IMEI, 手机号码, 绑定的跌倒设备ID, 对应的AppId}
# AppUser, 用户信息 {用户ID, 对应的WatchId}
# UserTBL, 
# HeartRate, 心率参数 {用户Id, 心率值, 时间} 
# Step, 计步数据 {用户Id, 步数值, 时间}


###########################################################################################
# TABLE 创建
###########################################################################################

# 创建用户table
# U_ID 用户ID
# U_AGE/U_NAME 用户的基本信息，后续对用户的基本信息进行添加alter
#CREATE TABLE TBL_USER
#(
#U_ID INT PRIMARY KEY,
#U_AGE CHAR,
#U_NAME VARCHAR(16)
#);

#DROP TABLE TBL_USER;

# 创建手表 运行参数table
# W_ID 手表ID
# W_U_ID 使用者的用户ID，是TBL_USER的U_ID相对应
# W_IMEI 与W_ID 是16进制的转换关系
# W_ID
CREATE TABLE TBL_WATCH 
( 
W_ID BIGINT PRIMARY KEY,
W_U_ID INT, # 使用者ID 
W_PHONENUMBER VARCHAR(16),
W_PHONEBOOK VARCHAR(128), #AppId1|AppId2|AppId3
W_DEVICEID VARCHAR(16), # 跌倒设备ID
W_DD_MODE VARCHAR(8),
W_ICCID VARCHAR(20),
W_IMEI VARCHAR(18) NOT NULL
);

DROP TABLE TBL_WATCH;

SELECT NOW();

SELECT TIMESTAMP(NOW());

# 创建定位table
# L_ID 定位信息Id
# L_W_ID 使用者的用户ID，是TBL_USER的U_ID相对应
# L_LONGITUDE 经度
# L_LATITUDE 纬度
# L_POSINFO 地理位置信息
# L_TIME 产生数据的时间
CREATE TABLE TBL_LOCATION 
(
L_ID INT PRIMARY KEY AUTO_INCREMENT,
L_D_ID BIGINT NOT NULL,
L_LONGITUDE VARCHAR(16) NOT NULL,
L_LATITUDE VARCHAR(16) NOT NULL,
L_POSINFO VARCHAR(256),
L_TIME TIMESTAMP NOT NULL,
FOREIGN KEY(L_D_ID) REFERENCES TBL_DEVICE(D_ID) ON DELETE CASCADE
);

DROP TABLE TBL_LOCATION;

# 创建已经与手表之间有绑定关系App Table
# A_ID 是App的ID
# A_U_ID 使用者的用户ID，是TBL_USER的U_ID相对应
# 
CREATE TABLE TBL_APP
(
A_ID INT PRIMARY KEY,
A_U_ID INT
#A_WATCHID VARCHAR(128) #WatchId1|WatchId2|WatchId3
);

# 删除 TBL_APP
DROP TABLE TBL_APP;

SHOW TABLES;

# 创建DEVICE表
# D_ID 设备ID Watch / App
# D_U_ID 用户ID，对应的用户的信息
# D_TYPE 设备是Watch还是App
# D_IMEI 如果是Watch设备的IMEI号
# D_PHNUM 对应的手机号码
# D_DDID 绑定的跌倒设备
# D_BINDLIST 绑定的设备IDList
CREATE TABLE TBL_DEVICE
(
D_ID BIGINT PRIMARY KEY,
D_U_ID INT
#D_TYPE VARCHAR(8), # WATCH/APP
#D_PHNUM VARCHAR(16)
#D_BINDLIST VARCHAR(128) #AppId1|AppId2|AppId3
);

# 删除 TBL_DEVICE
DROP TABLE TBL_DEVICE;

# 创建 DEVICE 与 App之间的关系表
# R_ID 关系IDX
# R_D_ID 外键设备ID
# R_A_ID 外键App ID
# 
CREATE TABLE TBL_R_DEV_APP
(
#R_ID BIGINT PRIMARY KEY,
R_D_ID BIGINT NOT NULL,
R_A_ID INT NOT NULL,
FOREIGN KEY(R_D_ID) REFERENCES TBL_DEVICE(D_ID) ON DELETE CASCADE,
FOREIGN KEY(R_A_ID) REFERENCES TBL_APP(A_ID) ON DELETE CASCADE
);

# 删除 TBL_R_DEV_APP
DROP TABLE TBL_R_DEV_APP;

# TBL_HEARTRATE 创建心率表
# H_ID 主键ID
# H_VALUE 心率值
# H_TIME 时间
CREATE TABLE TBL_HEARTRATE 
(
H_ID BIGINT NOT NULL,
H_VALUE INT NOT NULL,
H_TIME TIMESTAMP NOT NULL,
FOREIGN KEY(H_ID) REFERENCES TBL_DEVICE(D_ID) ON DELETE CASCADE
);

# 删除 TBL_HEARTRATE
DROP TABLE TBL_HEARTRATE;

# TBL_STEP 创建计步表
# S_ID 主键ID
# S_VALUE 心率值
# S_TIME 时间
CREATE TABLE TBL_STEP
(
S_ID BIGINT NOT NULL,
S_VALUE INT NOT NULL,
S_TIME TIMESTAMP NOT NULL,
FOREIGN KEY(S_ID) REFERENCES TBL_DEVICE(D_ID) ON DELETE CASCADE
);

# 删除 TBL_STEP
DROP TABLE TBL_STEP;




###########################################################################################
# PROCEDURE 创建
###########################################################################################


# 创建存储过程用于插入TBL_WATCH
# @DIMEI 设备的IMEI号，烧录前先写入数据库中 
# 
DELIMITER $$
CREATE PROCEDURE PROC_WATCH_INSERT(IN DIMEI VARCHAR(16)) 
BEGIN
	DECLARE WATCH_ID BIGINT;
	SELECT CONV(DIMEI, 16, 10) INTO @WATCH_ID;
	INSERT TBL_WATCH(W_ID, W_IMEI) VALUES(@WATCH_ID, DIMEI);
END
DELIMITER 
#


DROP PROCEDURE PROC_WATCH_INSERT;

CALL PROC_WATCH_INSERT('352315052834187');

SELECT * FROM tb_appuser_info

DELETE FROM TBL_WATCH WHERE W_ID=18


# 创建一个
DELIMITER $$
CREATE PROCEDURE PROC_DEV_APP_RELATION_INSERT(IN APPID INT, IN DIMEI VARCHAR(16), OUT RESULT INT)
BEGIN
	DECLARE EXIST INT;
    DECLARE WATCH_ID BIGINT;
    SELECT COUNT(*) INTO @EXIST FROM tb_appuser_info WHERE member_id=APPID; # appid 是否可用
	IF @EXIST = 0
    THEN
		SET RESULT = 1;
	ELSE
		SELECT CONV(DIMEI, 16, 10) INTO @WATCH_ID;
		SELECT COUNT(*) INTO @EXIST FROM TBL_WATCH WHERE W_IMEI=DIMEI AND W_ID=@WATCH_ID; # DIMEI是否可用
		IF @EXIST = 0
		THEN
			SET RESULT = 2;
		ELSE
			SELECT COUNT(*) INTO @EXIST FROM TBL_APP WHERE A_ID=APPID; # appid是否已经添加到内存中
			IF @EXIST = 0
			THEN
				INSERT TBL_APP(A_ID) VALUES(APPID);
			END IF;
			
			SELECT COUNT(*) INTO @EXIST FROM TBL_DEVICE WHERE D_ID=@WATCH_ID; # watchid是否已经添加到内存中
			IF @EXIST = 0
			THEN
				INSERT TBL_DEVICE(D_ID) VALUES(@WATCH_ID);
			END IF;
			
            SELECT COUNT(*) INTO @EXIST FROM TBL_R_DEV_APP WHERE R_D_ID=@WATCH_ID AND R_A_ID=APPID;
			IF @EXIST = 0
            THEN
				INSERT TBL_R_DEV_APP(R_D_ID, R_A_ID) VALUES(@WATCH_ID, APPID); # 添加绑定关系
				SET RESULT = 0;
			ELSE
				SET RESULT = 3;
            END IF;
		END IF;
    END IF;
END
DELIMITER 

#
DROP PROCEDURE PROC_DEV_APP_RELATION_INSERT;

#
DELETE FROM TBL_R_DEV_APP WHERE R_D_ID=239307951255536007


DELIMITER $$
CREATE PROCEDURE PROC_DEV_APP_RELATION_REAULT(IN APPID INT, IN DIMEI VARCHAR(16))
BEGIN
	DECLARE RESULT INT;
	CALL PROC_DEV_APP_RELATION_INSERT(APPID, DIMEI,  @RESULT);
	SELECT @RESULT;
END
DELIMITER

CALL PROC_DEV_APP_RELATION_REAULT(10794, '352315052834187');

SELECT * FROM TBL_R_DEV_APP;

SELECT * FROM TBL_WATCH;


DELIMITER $$
CREATE PROCEDURE PROC_DEV_APP_RELATION_DELETE(IN APPID INT, IN WATCH_ID BIGINT)
BEGIN
	#DECLARE WATCH_ID BIGINT;
    #SELECT CONV(DIMEI, 16, 10) INTO @WATCH_ID;
	DELETE FROM TBL_R_DEV_APP WHERE R_D_ID=WATCH_ID AND R_A_ID=APPID;
END
DELIMITER

DROP PROCEDURE PROC_DEV_APP_RELATION_DELETE

CALL PROC_DEV_APP_RELATION_DELETE(10794, 239307951255536007);

####
SELECT CONVERT('1', SIGNED);
SELECT HEX(CONVERT('12', SIGNED));

DECLARE WATCH_ID BIGINT;
SELECT CONV('12', 16, 10) 


# 根据WatchId查询已经绑定的AppId列表
DELIMITER $$
CREATE PROCEDURE PROC_APPIDLIST_IMEI_SELECT(IN DIMEI VARCHAR(16))
BEGIN
	DECLARE WATCH_ID BIGINT;
	SELECT CONV(DIMEI, 16, 10) INTO @WATCH_ID;
    
    SELECT R_A_ID FROM TBL_R_DEV_APP WHERE R_D_ID=@WATCH_ID;
END
DELIMITER 

DROP PROCEDURE PROC_APPIDLIST_IMEI_SELECT

DELIMITER $$
CREATE PROCEDURE PROC_APPIDLIST_DID_SELECT(IN DID BIGINT)
BEGIN
    SELECT R_A_ID FROM TBL_R_DEV_APP WHERE R_D_ID=DID;
END
DELIMITER 

CALL PROC_APPIDLIST_DID_SELECT(239307951255536007);

#SELECT R_A_ID FROM TBL_R_DEV_APP WHERE R_D_ID=


# 根据AppId查询已经绑定的WatchId列表
DELIMITER $$
CREATE PROCEDURE PROC_WATCHIDLIST_APPID_SELECT(IN APPID BIGINT)
BEGIN
    SELECT R_D_ID FROM TBL_R_DEV_APP WHERE R_A_ID=APPID;
END
DELIMITER 


#SELECT * FROM TBL_LOCATION
# 插入经纬度数据
#TBL_LOCATION
DELIMITER $$
CREATE PROCEDURE PROC_LOCATION_IMEI_INSERT(IN IMEI VARCHAR(16), IN LNG VARCHAR(16), IN LAT VARCHAR(16), IN POS VARCHAR(256))
BEGIN
	DECLARE WATCH_ID BIGINT;
	SELECT CONV(DIMEI, 16, 10) INTO @WATCH_ID;
    
    INSERT TBL_LOCATION(L_D_ID, L_LONGITUDE, L_LATITUDE, L_POSINFO, L_TIME) VALUES(@WATCH_ID, LNG, LAT, POS, NOW());
END
DELIMITER 

DROP PROCEDURE PROC_LOCATION_IMEI_INSERT

DELIMITER $$
CREATE PROCEDURE PROC_LOCATION_DID_INSERT(IN WATCH_ID BIGINT, IN LNG VARCHAR(16), IN LAT VARCHAR(16), IN POS VARCHAR(256))
BEGIN    
    INSERT TBL_LOCATION(L_D_ID, L_LONGITUDE, L_LATITUDE, L_POSINFO, L_TIME) VALUES(WATCH_ID, LNG, LAT, POS, NOW());
END
DELIMITER 



INSERT TBL_STEP VALUES(239307951255536007, 65, NOW());

DELIMITER $$
CREATE PROCEDURE PROC_STEP_DID_INSERT(IN WATCH_ID BIGINT, IN S_VALUE INT)
BEGIN    
    INSERT TBL_STEP VALUES(WATCH_ID, S_VALUE, NOW());
END
DELIMITER 


DROP PROCEDURE PROC_STEP_DID_INSERT
#SELECT * FROM TBL_STEP



DELIMITER $$
CREATE PROCEDURE PROC_HEARTRATE_DID_INSERT(IN WATCH_ID BIGINT, IN H_VALUE INT)
BEGIN    
    INSERT TBL_HEARTRATE VALUES(WATCH_ID, S_VALUE, NOW());
END
DELIMITER 


###########################################################################################
# PROCEDURE 描述
###########################################################################################
# 定义
# PROC_WATCH_INSERT(IN DIMEI VARCHAR(16)) 
# 实例
CALL PROC_WATCH_INSERT('352315052834187');

;
# 定义
# PROC_APPIDLIST_DID_SELECT(IN DID BIGINT)
# 实例
CALL PROC_APPIDLIST_DID_SELECT(239307951255536007);

# 定义
# PROC_WATCHIDLIST_APPID_SELECT(IN APPID BIGINT)
# 实例
CALL PROC_WATCHIDLIST_APPID_SELECT(10794);

# 定义
# PROC_DEV_APP_RELATION_INSERT(IN APPID INT, IN DIMEI VARCHAR(16), OUT RESULT INT)
# 实例
CALL PROC_DEV_APP_RELATION_INSERT(10794, '352315052834187',  @P_RESULT);
SELECT @P_RESULT;

# 定义
# PROC_LOCATION_DID_INSERT(IN WATCH_ID BIGINT, IN LNG VARCHAR(16), IN LAT VARCHAR(16), IN POS VARCHAR(256))
# 实例
CALL PROC_LOCATION_DID_INSERT(239307951255536007, '112.4563212', '23.3456321', '')

# 定义
# PROC_STEP_DID_INSERT(IN WATCH_ID BIGINT, IN S_VALUE INT)
# 实例
CALL PROC_STEP_DID_INSERT(10794, 1243);

# 定义
# PROC_HEARTRATE_DID_INSERT(IN WATCH_ID BIGINT, IN H_VALUE INT)
# 实例
CALL PROC_HEARTRATE_DID_INSERT(10794, 68);


# 定义
# PROC_DEV_APP_RELATION_REAULT(IN APPID INT, IN DIMEI VARCHAR(16))
# 实例
CALL PROC_DEV_APP_RELATION_REAULT(10794, '352315052834187');


# 定义
# PROC_DEV_APP_RELATION_DELETE(IN APPID INT, IN WATCH_ID BIGINT)
# 实例
CALL PROC_DEV_APP_RELATION_DELETE(10794, 239307951255536007);

############################################################################################

#EDFF12342345613
#EDFF12342345621
#EDFF12342345639
#EDFF12342345647
#EDFF12342345654
#EDFF12342345662
#EDFF12342345670
#EDFF12342345688
#EDFF12342345696
#EDFF12342345704
# 增加测试 IMEI
CALL PROC_WATCH_INSERT('EDFF12342345613');
CALL PROC_WATCH_INSERT('EDFF12342345621');
CALL PROC_WATCH_INSERT('EDFF12342345639');
CALL PROC_WATCH_INSERT('EDFF12342345647');
CALL PROC_WATCH_INSERT('EDFF12342345654');

CALL PROC_WATCH_INSERT('EDFF12342345662');
CALL PROC_WATCH_INSERT('EDFF12342345670');
CALL PROC_WATCH_INSERT('EDFF12342345688');
CALL PROC_WATCH_INSERT('EDFF12342345696');
CALL PROC_WATCH_INSERT('EDFF12342345704');

SELECT * FROM TBL_WATCH;

CALL PROC_APPIDLIST_DID_SELECT(10794)

###############################################   ################################################
GRANT ALL PRIVILEGES ON *.* TO 'app_server'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;

FLUSH PRIVILEGES;


SHOW GRANTS FOR 'app_server';

SHOW DATABASES;

USE qjk;

SHOW TABLES;

USE qjk_test;


SELECT * FROM tb_users;

SELECT * FROM TBL_DEVICE;

SELECT * FROM tb_appuser_info;